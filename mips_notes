
Good link for intro - http://logos.cs.uic.edu/366/notes/mips%20quick%20tutorial.htm

0         zero                                    the value 0
1         $at                     (assembler temporary) reserved by the assembler
2-3       $v0 - $v1               (values)              from expression evaluation and function results
4-7       $a0 - $a3               (arguments)           First four parameters for subroutine.  Not preserved across procedure calls
8-15      $t0 - $t7               (temporaries)         Caller saved if needed. Subroutines can use w/out saving.  Not preserved across procedure calls
16-23     $s0 - $s7               (saved values)        Callee saved.  A subroutine using one of these must save original and restore it before exiting.  Preserved across procedure calls
24-25     $t8 - $t9               (temporaries)         Caller saved if needed. Subroutines can use w/out saving.  These are in addition to $t0 - $t7 above.  Not preserved across procedure calls.
26-27     $k0 - $k1                                     reserved for use by the interrupt/trap handler
28        $gp                      global pointer.      Points to the middle of the 64K block of memory in the static data segment.
29        $sp                      stack pointer        Points to last location on the stack.
30        $s8/$fp                                       saved value / frame pointer Preserved across procedure calls
31        $ra                                                        return address


Instruction set reference -

http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html
http://math-atlas.sourceforge.net/devel/assembly/mips-iv.pdf


LB    Load Byte MIPS I
LBU   Load Byte Unsigned I
SB    Store Byte I
LH    Load Halfword I
LHU   Load Halfword Unsigned I
SH    Store Halfword I
LW    Load Word I
LWU   Load Word Unsigned III
SW    Store Word I
LD    Load Doubleword III
SD    Store Doubleword III


Instructions

DADDIU tr, ts, immediate                       rt <- rs + immediate

SD tr , offset(base)

move tr, ts is same as ADDI rt, rs, 0

ADDI rt, rs, immediate                         rt <- rs + immediate

LW rt, offset(base)                            rt <- memory[base+offset]
