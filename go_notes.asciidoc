:toc:

Packages, Variables and Functions
---------------------------------

Packages
~~~~~~~~

* Every Go program is made up of packages.
  Programs start running in package main.
* By convention, the package name is the same as the last element of the import path
* imports can be grouped into a parenthesized, "factored" import statement.
  This is preferred over individual imports.
+
----
import (
    "fmt"
    "math"
)
----
+
* In Go, a name is exported if it begins with a capital letter.

Functions
~~~~~~~~~

* 0 or more args. 0 or more return values
+
----
func add(x int, y int) int {
    return x + y
}
----
+
* When two or more consecutive named function parameters share a type, you can omit the type from all but the last.
+
----
x int, y int
to
x, y int
----
+
* Naked returns (to be avoided)
+
----
func split(sum int) (x, y int) {
    x = sum * 4 / 9
    y = sum - x
    return
}
----

Variables
~~~~~~~~~

* Initialization using the var statement. This is possible both inside functions and in global scope
+
----
var i, j int = 1, 2
----
+
* Using the := construct, var is skipped and type is assumed.
+
----
k := 3
c, python, java := true, false, "no!"
----
+
* var statements can also be factored like import statements

Basic Types
^^^^^^^^^^^

----
bool
string
int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr
byte // alias for uint8
rune // alias for int32
     // represents a Unicode code point
float32 float64
complex64 complex128
----

* Variables w/o Initialization is set to 0/false/empty-string
* Constants are declared like variables, but with the const keyword. Constants
  can be character, string, boolean, or numeric values. Constants cannot be
  declared using the := syntax.

Flow control statements: for, if, else, switch and defer
--------------------------------------------------------

comments
~~~~~~~~

* comments are like c$$++. //$$ for one line and $$/* and */$$ for multi line

for
~~~~

* for .. init, condition, post separated by ;. Unlike other languages like C,
  Java, or Javascript there are no parentheses surrounding the three
  components of the for statement and the braces { } are always required.
+
----
func main() {
    sum := 0
    for i := 0; i < 10; i++ {
        sum += i
    }
    fmt.Println(sum)
}
----
+
* init and post are optional. At that point you can drop the semicolons: C's
  while is spelled for in Go. Omitting condition makes it a infinite loop
+
----
main() {
    sum := 1
    for sum < 1000 {
        sum += sum
    }
    fmt.Println(sum)
}
----

if
~~~~

* if statements are like its for loops; the expression need not be surrounded
  by parentheses ( ) but the braces { } are required
* the if statement can start with a short statement to execute before the
  condition. A var initailized here is availabe in if, else if and else.
+
----
func pow(x, n, lim float64) float64 {
    if v := math.Pow(x, n); v < lim {
        return v
    }
    return lim
}
----

switch
~~~~~~

* Switch cases evaluate cases from top to bottom, stopping when a case succeeds
* A case body breaks automatically, unless it ends with a fallthrough statement
+
----
func main() {
    fmt.Print("Go runs on ")
    switch os := runtime.GOOS; os {
    case "darwin":
        fmt.Println("OS X.")
    case "linux":
        fmt.Println("Linux.")
    default:
        // freebsd, openbsd,
        // plan9, windows...
        fmt.Printf("%s.", os)
    }
}
----
+
* f isn't called if i == 0
+
----
switch i {
  case 0:
  case f():
}
----
+
* Switch without a condition is the same as switch true. This construct can be
  a clean way to write long if-then-else chains.

Defer
~~~~~

* A defer statement defers the execution of a function until the surrounding
  function returns. The args to any function called, are however, evaulated
  immediately
* Deferred function calls are pushed onto a stack. When a function returns, its
  deferred calls are executed in last-in-first-out order.

More types
----------

Pointer
~~~~~~~

* Like c, * is used for type. *T is a pointer of type T. & is for getting a
  variable's pointer, and *var is for deferencing or indirecting. However,
  there is no pointer arithmetic in go.

structs
~~~~~~~

* A struct is a collection of fields. Fields are accessed using dot
+
----
type Vertex struct {
    X int
    Y int
}
----
+
* To access the field X of a struct when we have the struct pointer p we could
  write (*p).X. However, that notation is cumbersome, so the language permits
  us instead to write just p.X, without the explicit dereference.
* Struct literal is much like c

arrays
~~~~~~

* [n]T is an array of n values of type T
+
----
func main() {
    var a [2]string
    a[0] = "Hello"
    a[1] = "World"
    fmt.Println(a[0], a[1])
    fmt.Println(a)

    primes := [6]int{2, 3, 5, 7, 11, 13}
    auto_size_detected_array := [...]int{2, 3, 5, 7, 11, 13}
    fmt.Println(primes)
}
----
+
* Go's array are values. Think of it as struct with indexed members. Passing
  arrays to function will pass entire copies. (No decaying of name to pointer)

slices
~~~~~~

* An array has a fixed size. A slice, on the other hand, is a
  dynamically-sized, flexible view into the elements of an array. In practice,
  slices are much more common than arrays.
* The type []T is a slice with elements of type T.
* This expression creates a slice of the first five elements of the array a
+
----
 a[0:5]
----
+
* A slice does not store any data, it just describes a section of an underlying
  array.  Changing the elements of a slice modifies the corresponding elements
  of its underlying array.  Other slices that share the same underlying array
  will see those changes.
* Slice - len and cap
* Can be created with a built-in function - make. Note the odditity. The first
  args is a type-name (and not a var-name)
+
----
func make([]T, len, cap) []T
----


Managing Go code
----------------

* Go programmers typically keep all their Go code in a single workspace.
* A workspace contains many version control repositories (managed by Git, for example).
* Each repository contains one or more packages.
* Each package consists of one or more Go source files in a single directory.
* The path to a package's directory determines its import path.

Useful Statements
-----------------

Printing

----
fmt.Println(split(17))
var i int
fmt.Println(i, c, python, java)
----


Read later
----------

* https://blog.golang.org/defer-panic-and-recover[Defer-panic-and-recover]


