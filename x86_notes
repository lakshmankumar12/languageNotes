
Link to see gas syntax:

http://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax

mov $1, %eax

 => move immediate value of 1 to eax

mov %eax, %ebx

 => move value in eax to ebx.

mov (%eax), %ebx

 => move value in location pointed by eax to ebx.

mov 4(%eax), %ebx

 => move value in location pointed by (eax+4) to ebx.

mov 4(%eax,%ecx),%ebx

 => move value in location pointed by (eax+ecx+4) to ebx.

mov    (%ecx,%eax,8),%edx
mov   4(%ecx,%eax,8),%edx

 =>     ((%eax * 8) + %ecx). Take the value at this address and move to edx
 => 4 + ((%eax * 8) + %ecx). Take the value at this address and move to edx

lea (%ecx,%eax,8), %edx

 => multiply eax by 8 and add to ecx. Put this address in edx

cmp %eax, %ebx

 => if ebx < eax, when performing unsigned comparision, then set carry
    if both are equal, then set zero
    if XOR of (overflow/sign) is 1, then ebx is < eax

test   %eax,%eax

 => check if eax is 0, and if 0 sets ZF. MOst likely followed with je (was 0) or jne (wasn't 0)

xor %edi, %edi

 => this is same as 'mov $0,%edi'. Usually preferred over mov for taking lesser space.

shl $0x18, %esi

 => shift left %esi by 0x18 bits always filling 0 in lsb. The shift bits are lost (except for last, which goes into carry)

shld   $0x18,%edx,%edi

 =>  will shift the bits in %edi by $0x18 bits filling the new lsb with msb bits of %edx

lea    0x0(%esi,%eiz,1),%esi

 => Just another nop (for 4 byte nop)!

movzbl  0x01(%eax,%ecx),%eax

  => load one byte from %eax + %ecx + 1 and zero-extend to full register


shr %cl, %eax
shl %cl, %eax
sar 0x1f, %edx
sal %cl, %edx

  => Right/Left shift the 2nd register by 1st-register's value time. (Compilers are usually intelligent enuf to use only one-byte of the register)
  => sh* doesn't extend sign bit. sar does. sal/shl are exactly the same.
  => shl/sal puts the last lost bit in carry flag


Jumps reference - http://www.unixwiz.net/techtips/x86-jumps.html
-----

jns  jump if no sign.

Suffixes
--------

* b = byte (8 bit)
* s = short (16 bit integer) or single (32-bit floating point)
* w = word (16 bit)
* l = long (32 bit integer or 64-bit floating point)
* q = quad (64 bit)
* t = ten bytes (80-bit floating point)


Typically in a function
-----------------------

At start, you should see

push %ebp
mov %esp, %ebp
push <some-more-registers that are garbled here>
sub <some-good-value>,%esp  <-- this value is the scratch that this frame uses.

Now onwards:

positive-offset(%ebp) are args to this function.
negative-offset(%ebp) are local-scratch area to this function, could be local vars or just scratch area.

at exit:

pop <registers that were pushed in reverse order>
pop %ebp
ret

--or--

pop <registers that were pushed in reverse order>
leave

Order of arguments
------------------

function1 (int arg1, int arg2, int arg3)

will be

push arg3
push arg2
push arg1
call function.


